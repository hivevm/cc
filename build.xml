<?xml version='1.0' encoding='ISO-8859-1' ?>
<project name="javacc" default="jar" basedir=".">
	<property name="java-src" value="src/main/java" />
	<property name="resources-src" value="src/main/resources" />
	<property name="generated-src" value="src/main/generated-sources" />
	<property name="parser-generated-src" value="${generated-src}/org/javacc/parser" />
	<property name="utils-generated-src" value="${generated-src}/org/javacc/utils" />
	<property name="jjtree-generated-src" value="${generated-src}/org/javacc/jjtree" />

	<property name="bootstrap-jar" value="bootstrap/javacc.jar" />
	<property name="jjtree-class-name" value="org.javacc.jjtree.Main" />
	<property name="javacc-class-name" value="org.javacc.parser.Main" />

	<property name="target-folder" value="target" />

	<property file="${resources-src}/version.properties" />
	<property name="version" value="${version.major}.${version.minor}.${version.patch}" />

	<property name="javacc" value="${target-folder}/javacc.jar" />
	<property name="javacc-last" value="${target-folder}/javacc-last.jar" />

	<property name="javacc-with-version" value="javacc-${version}.jar" />
	<property name="javacc-last-with-version" value="javacc-last-${version}.jar" />

	<property name="javacc-path" value="${target-folder}/${javacc-with-version}" />
	<property name="javacc-last-path" value="${target-folder}/${javacc-last-with-version}" />


	<!-- Cleans all the generated sources, temporary files, dist files and compiled classes -->
	<target name="clean">
		<delete dir="classes" />
		<delete dir="${target-folder}" />
		<delete dir="dist" />
		<delete dir="${generated-src}" />
	</target>


	<!-- ======================== -->
	<!-- BUILD with OLD BOOTSTRAP -->
	<!-- ======================== -->

	<!-- Build the new version with the old jar (current bootstrap jar) and create the new version jar
       (named javacc.jar with a copy named javacc-x.y.z.jar)  -->
	<!-- Here the new version jar does not benefit from enhancements of JavaCC itself (e.g. performance) -->
	<!-- The tests will benefit from these enhancements -->
	<target name="jar">
		<antcall target="compile_create-jars" />
	</target>

	<!-- Be careful not to include the test files in the distribution. -->
	<target name="jar-check">
		<uptodate property="jar.uptodate" targetfile="${javacc-path}">
			<srcfiles dir="src/main" />
		</uptodate>
	</target>

	<!-- Compiles with old bootstrap jar and create new jars -->
	<target name="compile_create-jars" depends="jar-check" unless="jar.uptodate">
		<mkdir dir="${target-folder}" />
		<antcall target="compile" />
		<jar jarfile="${javacc}" basedir="classes" compress="true" />
		<copy file="${javacc}" tofile="${javacc-path}" />
	</target>

	<!-- Compiles jj, jjt & java source & generated files with bootstrap jar -->
	<target name="compile" depends="clean">
		<antcall target="compile-sub">
			<param name="param-jar" value="${bootstrap-jar}" />
		</antcall>
	</target>


	<!-- ==================== -->
	<!-- BUILD a DISTRIBUTION -->
	<!-- ==================== -->

	<!-- Build a distribution -->
	<target name="dist" depends="jar" description="build a distribution">
		<property name="install-name" value="${target-folder}/javacc-${version}" />

		<delete file="${install-name}-distribution.tar.gz" />
		<tar destfile="${install-name}-distribution.tar.gz" compression="gzip">
			<tarfileset username="root" uid="1" group="root" prefix="javacc-${version}" filemode="444" file="LICENSE" />
			<tarfileset username="root" uid="1" group="root" prefix="javacc-${version}/${target-folder}" filemode="444" file="${javacc}" />
		</tar>

		<delete file="${install-name}-distribution.zip" />
		<zip destfile="${install-name}-distribution.zip">
			<zipfileset prefix="javacc-${version}/${target-folder}" filemode="444" file="${javacc}" />
			<zipfileset prefix="javacc-${version}" filemode="444" file="LICENSE" />
		</zip>

		<delete dir="." includes="**/*.class" />
	</target>


	<!-- ================================== -->
	<!-- BUILD with the LAST GENERATED JAR -->
	<!-- ================================= -->

	<!-- Build the new version with the new jar and create another new jar
       (named javacc-last.jar with a copy named javacc-last-x.y.z.jar)  -->
	<!-- Here the new version jar benefits from enhancements of JavaCC itself (e.g. performance) -->
	<!-- The bootstrap jar should be regularly manually updated with a stable last jar -->
	<target name="jar-last" description="build javacc.jar with last jar">
		<antcall target="compile-last" />
		<jar jarfile="${javacc-last}" basedir="classes" compress="true" />
		<copy file="${javacc-last}" tofile="${javacc-last-path}" />
	</target>

	<!-- Compiles jj, jjt & java source & generated files with the last generated jar -->
	<target name="compile-last" depends="">
		<antcall target="compile-sub">
			<param name="param-jar" value="${javacc}" />
		</antcall>
	</target>


	<!-- ============ -->
	<!-- BUILD COMMON -->
	<!-- ============ -->

	<!-- Compiles jj, jjt & java source & generated files with a given jar passed as a parameter-->
	<target name="compile-sub">

		<!-- ReGenerate the Java CC Main Parser with the new jar -->
		<java classname="${javacc-class-name}" classpath="${param-jar}" dir="${basedir}/src/main/javacc" fork="true">
			<arg value="-OUTPUT_DIRECTORY=${basedir}/${parser-generated-src}" />
			<arg value="JavaCC.jj" />
		</java>

		<!-- This class is overwritten -->
		<delete file="${parser-generated-src}/Token.java" />

		<!-- ReGenerate the JJTree Parser Definition (from the tree definition) -->
		<java classname="${jjtree-class-name}" classpath="${param-jar}" dir="${basedir}/src/main/jjtree" fork="true">
			<arg value="-OUTPUT_DIRECTORY=${basedir}/${jjtree-generated-src}" />
			<arg value="JJTree.jjt" />
		</java>

		<!-- Generate the JJTree Parser with the new jar  -->
		<java classname="${javacc-class-name}" classpath="${param-jar}" dir="${basedir}/${jjtree-generated-src}" fork="true">
			<arg value="-OUTPUT_DIRECTORY=${basedir}/${jjtree-generated-src}" />
			<arg value="JJTree.jj" />
		</java>

		<!-- Delete the .jj file created by the jjtree program and the classes that were overwritten and already added into the main source path -->
		<delete file="${jjtree-generated-src}/JJTree.jj" />
		<delete file="${jjtree-generated-src}/ASTBNF.java" />
		<delete file="${jjtree-generated-src}/ASTBNFAction.java" />
		<delete file="${jjtree-generated-src}/ASTBNFDeclaration.java" />
		<delete file="${jjtree-generated-src}/ASTBNFNodeScope.java" />
		<delete file="${jjtree-generated-src}/ASTExpansionNodeScope.java" />
		<delete file="${jjtree-generated-src}/ASTJavacode.java" />
		<delete file="${jjtree-generated-src}/ASTJavacodeBody.java" />
		<delete file="${jjtree-generated-src}/ASTNodeDescriptor.java" />
		<delete file="${jjtree-generated-src}/ASTNodeDescriptorExpression.java" />
		<delete file="${jjtree-generated-src}/ASTOptionBinding.java" />
		<delete file="${jjtree-generated-src}/JJTreeParserDefaultVisitor.java" />
		<delete file="${jjtree-generated-src}/Token.java" />

		<!-- ReGenerate the Condition Parser with the new jar -->
		<java classname="${javacc-class-name}"
		      classpath="${param-jar}"
		      dir="${basedir}/src/main/javacc"
		      fork="true"
		>
			<arg value="-OUTPUT_DIRECTORY=${basedir}/${utils-generated-src}" />
			<arg value="ConditionParser.jj" />
		</java>

		<mkdir dir="classes" />

		<copy todir="classes/templates">
			<fileset dir="${resources-src}/templates" />
		</copy>

		<copy file="${resources-src}/version.properties" todir="classes" />

		<javac srcdir="${java-src}" destdir="classes" debug="true" classpath="" includeantruntime='false' source="8" target="8" >
			<src path="${java-src}" />
			<src path="${generated-src}" />
			<src path="${resources-src}" />
		</javac>
	</target>
</project>
