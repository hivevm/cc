PARSER_BEGIN(JavaCCParser)
  LEGACY: true,
  PACKAGE: "org.hivevm.cc.parser",
  IMPORTS: "java.util.List,java.util.ArrayList",
  EXTENDS: "AbstractJavaCCParser"
PARSER_END


/**********************************************
 * THE JAVACC TOKEN SPECIFICATION STARTS HERE *
 **********************************************/

/* JAVACC RESERVED WORDS: These are the only tokens in JavaCC but not in Java */

TOKEN :
{
  < _LOOKAHEAD: "LOOKAHEAD" >
| < _IGNORE_CASE: "IGNORE_CASE" >
| < _PARSER_BEGIN: "PARSER_BEGIN" >
| < _PARSER_END: "PARSER_END" >
| < _TOKEN: "TOKEN" >
| < _SPECIAL_TOKEN: "SPECIAL_TOKEN" >
| < _MORE: "MORE" >
| < _SKIP: "SKIP" >
| < _EOF: "EOF" >
}

/*
 * The remainder of the tokens are exactly (except for the removal of tokens
 * as in the Java grammar and must be diff equivalent
 * (again with the exceptions above) to it.
 */

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
| <"/**" ~["/"]> @java input_stream.backup(1); @end : IN_FORMAL_COMMENT
| "/*" : IN_MULTI_LINE_COMMENT
| "@cpp" : PARSER_CODE
| "@java" : PARSER_CODE
}


<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<PARSER_CODE>
TOKEN :
{
  < ECODE_END: "@end" > : DEFAULT
| < ECODE: (~["@"])+ >
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* JAVA RESERVED WORDS AND LITERALS */

TOKEN :
{
  < BOOLEAN: "boolean" >
| < INT: "int" >
| < CHAR: "char" >
| < NULL: "null" >
| < TRUE: "true" >
| < FALSE: "false" >
| < VOID: "void" >
}

/* JAVA LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
      <DECIMAL_LITERAL> (["l","L"])?
    | <HEX_LITERAL> (["l","L"])?
    | <OCTAL_LITERAL> (["l","L"])?
  >
| < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
| < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
| < #OCTAL_LITERAL: "0" (["0"-"7"])* >
| < FLOATING_POINT_LITERAL:
      <DECIMAL_FLOATING_POINT_LITERAL>
    | <HEXADECIMAL_FLOATING_POINT_LITERAL>
  >
| < #DECIMAL_FLOATING_POINT_LITERAL:
      (["0"-"9"])+ "." (["0"-"9"])* (<DECIMAL_EXPONENT>)? (["f","F","d","D"])?
    | "." (["0"-"9"])+ (<DECIMAL_EXPONENT>)? (["f","F","d","D"])?
    | (["0"-"9"])+ <DECIMAL_EXPONENT> (["f","F","d","D"])?
    | (["0"-"9"])+ (<DECIMAL_EXPONENT>)? ["f","F","d","D"]
  >
| < #DECIMAL_EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
| < #HEXADECIMAL_FLOATING_POINT_LITERAL:
     "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])+ (".")? <HEXADECIMAL_EXPONENT> (["f","F","d","D"])?
   | "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])* "." (["0"-"9","a"-"f","A"-"F"])+ <HEXADECIMAL_EXPONENT> (["f","F","d","D"])?
  >
| < #HEXADECIMAL_EXPONENT: ["p","P"] (["+","-"])? (["0"-"9"])+ >
| < CHARACTER_LITERAL:
    "'"
    ( (~["'","\\","\n","\r"])
      | ("\\"
        ( ["n","t","b","r","f","\\","'","\""]
        | ["0"-"7"] ( ["0"-"7"] )?
        | ["0"-"3"] ["0"-"7"] ["0"-"7"]
        )
      )
    )
    "'"
  >
| < STRING_LITERAL:
    "\""
    ( (~["\"","\\","\n","\r"])
      | ("\\"
        ( ["n","t","b","r","f","\\","'","\""]
        | ["0"-"7"] ( ["0"-"7"] )?
        | ["0"-"3"] ["0"-"7"] ["0"-"7"]
        )
      )
    )*
    "\""
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < COMMA: "," >
| < DOT: "." >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < HASH: "#" >
| < COLON: ":" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < BIT_OR: "|" >
}


/************************************************
 * THE JAVACC GRAMMAR SPECIFICATION STARTS HERE *
 ************************************************/
void javacc_input() :
{
  < _PARSER_BEGIN > < LPAREN > identifier()
  @java
    setParserName(0);
  @end
  < RPAREN >
  ( option_binding() )*
  @java
    getOptions().normalize();
  @end
  < _PARSER_END > ( production() )+
  <EOF>
}

void option_binding() :
@java
    Token t = getToken(1);
@end
{
  <IDENTIFIER> < COLON >
  ( IntegerLiteral() | BooleanLiteral() | StringLiteral() )
  @java
    setInputOption(t, getToken(0));
  @end
  ( < COMMA > )?
}

void production() :
{
  LOOKAHEAD(1)
  /*
   * Since SKIP, TOKEN, etc. are both JavaCC reserved words and Java
   * identifiers, we need to give preference to "regular_expression_production"
   * over "bnf_production".
   */
  regular_expr_production()
| bnf_production()
}

void bnf_production() :
@java
    BNFProduction p = new BNFProduction();
    Container c = new Container();
    Token t = getToken(1);
    p.setFirstToken(t);
    p.setThrowsList(new ArrayList<>());
    p.setLocation(t);
@end
{
  ResultType(p.getReturnTypeTokens())
  @java
    p.setLhs(identifier());
  @end
  FormalParameters(p.getParameterListTokens())
  < COLON >
  ( < ECODE >
  @java
    p.getDeclarationTokens().add(getToken(0));
  @end
  < ECODE_END > )*
  < LBRACE >
  expansion_choices(c)
  t=< RBRACE >
  ( < ECODE >
  @java
    p.getDeclarationEndTokens().add(getToken(0));
  @end
  < ECODE_END > )*
  @java
    p.setLastToken(t);
    production_addexpansion(p, (Expansion)(c.member));
    addproduction(p);
  @end
}

void regular_expr_production() :
@java
    TokenProduction p = new TokenProduction();
    List<String> states;
    Token t = getToken(1);
    p.setFirstToken(t);
    p.setLocation(t);
@end
{
  @java
    // set p.lexStates assuming there is no state spec.
    // and then override if necessary.
    p.setLexStates(new String[] {"DEFAULT"});
  @end
  [
    LOOKAHEAD(2) < LT > < STAR > < GT >
	@java
	  p.setLexStates(null);
	@end
  | < LT >
	@java
	  states = new ArrayList<>();
	@end
      t=<IDENTIFIER>
	@java
	  states.add(t.image);
	@end
      ( < COMMA > t=<IDENTIFIER>
	@java
	  states.add(t.image);
	@end
      )*
    < GT >
	@java
	  p.setLexStates(new String[states.size()]);
	  for (int i = 0; i < states.size(); i++) {
	    p.setLexState((String)states.get(i), i);
	  }
	@end
  ]
  regexpr_kind(p)
  [
    < LBRACKET > t=< _IGNORE_CASE > < RBRACKET >
	@java
	  p.setIgnoreCase(true);
	@end
  ]
  < COLON >
  < LBRACE > regexpr_spec(p) ( < BIT_OR > regexpr_spec(p) )* t=< RBRACE >
  @java
	addregexpr(p);
  @end
}

void regexpr_kind(TokenProduction p) :
{
  < _TOKEN >
  @java
    p.setKind(TokenProduction.Kind.TOKEN);
  @end
| < _SPECIAL_TOKEN >
  @java
    p.setKind(TokenProduction.Kind.SPECIAL);
  @end
| < _SKIP >
  @java
    p.setKind(TokenProduction.Kind.SKIP);
  @end
| < _MORE >
  @java
    p.setKind(TokenProduction.Kind.MORE);
  @end
}

void regexpr_spec(TokenProduction p) :
@java
    Container c = new Container();
    Action act = new Action();
    Token t = null;
    RegExprSpec res = new RegExprSpec();
@end
{
  regular_expression(c)
  @java
    res.rexp = (RegularExpression)c.member;
    res.rexp.setTpContext(p);
  @end
  [
	@java
	  t = getToken(1);
	@end
    Statement(act.getActionTokens())
	@java
	  if (res.rexp.isPrivateExp()) {
	    JavaCCErrors.parse_error(t, "Actions are not permitted on private (#) regular expressions.");
	  }
	@end
  ]
  [ < COLON > t=<IDENTIFIER>
	@java
	  res.nextState = t.image;
	  if (res.rexp.isPrivateExp()) {
	    JavaCCErrors.parse_error(t, "Lexical state changes are not permitted after private (#) regular expressions.");
	  }
	@end
  ]
	@java
	  res.act = act;
	  res.nsTok = t;
	  p.getRespecs().add(res);
	@end
}

void expansion_choices(Container c1) :
@java
    boolean morethanone = false;
    Choice ch = null; // unnecessary initialization to make Java compiler happy!
    Container c2 = new Container();
@end
{
  expansion(c1)
  ( < BIT_OR > expansion(c2)
	@java
	  if (morethanone) {
	    ch.getChoices().add((Expansion)c2.member);
	    ((Expansion)c2.member).parent = ch;
	  } else {
	    morethanone = true;
	    ch = new Choice((Expansion)c1.member);
	    ((Expansion)c1.member).parent = ch;
	    ch.getChoices().add((Expansion)c2.member);
	    ((Expansion)c2.member).parent = ch;
	  }
	@end
  )*
	@java
	  if (morethanone) {
	    c1.member = ch;
	  }
	@end
}

void expansion(Container c1) :
@java
    Sequence seq = new Sequence();
    Container c2 = new Container();
    Lookahead la = new Lookahead();
    Token t = getToken(1);
    seq.setLocation(t);
    la.setLocation(t);
@end
{
  @java
    la.setAmount(getOptions().getLookahead());
    la.setLaExpansion(null);
    la.setExplicit(false);
  @end
  ( LOOKAHEAD(1)
    t=< _LOOKAHEAD > < LPAREN > la=local_lookahead() < RPAREN >
	@java
	  if (inLocalLA != 0 && la.getAmount() != 0) {
	    JavaCCErrors.warning(t, "Only semantic lookahead specifications within other lookahead specifications is considered.  Syntactic lookahead is ignored.");
	  }
	@end
  )?
  @java
    seq.getUnits().add(la);
  @end
  ( LOOKAHEAD(0, { notTailOfExpansionUnit() } )
    expansion_unit(c2)
	@java
	  seq.getUnits().add(c2.member);
	  ((Expansion)c2.member).parent = seq;
	  ((Expansion)c2.member).ordinal = seq.getUnits().size()-1;
	@end
  )+
  @java
    if (la.getLaExpansion() == null) {
      la.setLaExpansion(seq);
    }
    c1.member = seq;
  @end
}

Lookahead local_lookahead() :
@java
    Lookahead la = new Lookahead();
    la.setExplicit(true);
    Token t = getToken(1);
    la.setLocation(t);
    la.setLaExpansion(null);
    Container c = new Container();
    boolean commaAtEnd = false, emptyLA = true;
    int laAmount;
    inLocalLA++;
@end
{
  [
    /*
     * The lookahead of 1 is to turn off the warning message that lets
     * us know that an expansion choice can also start with an integer
     * literal because a primary expression can do the same.  But we
     * know that this is what we want.
     */
    LOOKAHEAD(1)
    laAmount = IntegerLiteral()
	@java
	  emptyLA = false;
	  la.setAmount(laAmount);
	@end
  ]
  [ LOOKAHEAD(0, { checkEmptyLA(emptyLA, getToken(1)) } )
    < COMMA >
	@java
	  commaAtEnd = true;
	@end
  ]
  [ LOOKAHEAD(0, { checkEmpty(getToken(1)) } )
    expansion_choices(c)
	@java
	  emptyLA = false; commaAtEnd = false;
	  la.setLaExpansion((Expansion)c.member);
	@end
  ]
  [ LOOKAHEAD(0, { checkEmptyLAAndCommandEnd(emptyLA, commaAtEnd, getToken(1)) } )
    < COMMA >
	@java
	  commaAtEnd = true;
	@end
  ]
  [ LOOKAHEAD(0, { checkEmptyLAOrCommandEnd(emptyLA, commaAtEnd) } )
    < LBRACE >
    [ Expression(la.getActionTokens()) ]
    < RBRACE >
	@java
	  if (emptyLA) {
	    la.setAmount(0);
	  }
	@end
  ]
	@java
	  inLocalLA--;
	  return la;
	@end
}

void expansion_unit(Container c) :
@java
    String name;
    List<Token> lhsTokens = new ArrayList<>();
    NonTerminal nt;
    Action act;
    Token t;
    Lookahead la;
@end
{
  LOOKAHEAD(1)
  /*
   * We give this priority over primary expressions which use LOOKAHEAD as the
   * name of its identifier.
   */
  t=< _LOOKAHEAD > < LPAREN > la=local_lookahead() < RPAREN >
  @java
	// Now set the la_expansion field of la with a dummy
	// expansion (we use EOF).
	la.setLaExpansion(new REndOfFile());
	// Create a singleton choice with an empty action.
	Choice ch = new Choice(t);
	Sequence seq = new Sequence(t, la);
	la.parent = seq; la.ordinal = 0;
	act = new Action();
    act.setLocation(t);
	seq.getUnits().add(act);
	act.parent = seq; act.ordinal = 1;
	ch.getChoices().add(seq);
	seq.parent = ch; seq.ordinal = 0;
	if (la.getAmount() != 0) {
	  if (la.getActionTokens().size() != 0) {
	    JavaCCErrors.warning(t, "Encountered LOOKAHEAD(...) at a non-choice location.  Only semantic lookahead will be considered here.");
	  } else {
	    JavaCCErrors.warning(t, "Encountered LOOKAHEAD(...) at a non-choice location.  This will be ignored.");
	  }
	}
	c.member = ch;
  @end
| @java
	act = new Action();
	t = getToken(1);
    act.setLocation(t);
  @end
  Statement(act.getActionTokens())
  @java
	if (inLocalLA != 0) {
	  JavaCCErrors.warning(t, "Action within lookahead specification will be ignored.");
	}
	c.member = act;
  @end
| t=< LBRACKET > expansion_choices(c) < RBRACKET >
  @java
	c.member = new ZeroOrOne(t, (Expansion)c.member);
  @end
|
  LOOKAHEAD(
    identifier()
  | StringLiteral()
  | < LT >
  | PrimaryExpression() < ASSIGN >
  )
  [
    LOOKAHEAD(PrimaryExpression() < ASSIGN >)
	@java
	  Token first = getToken(1);
	@end
    PrimaryExpression()
	@java
	  Token last = getToken(0);
	@end
    < ASSIGN >
	@java
	  t = first;
	  while (true) {
	    lhsTokens.add(t);
	    if (t == last) break;
	    t = t.next;
	  }
	@end
  ]
  (
	LOOKAHEAD( identifier() < LPAREN >)
	@java
	  t = getToken(1);
	  nt = new NonTerminal();
      nt.setLocation(t);
	  nt.setLhsTokens(lhsTokens);
	@end
    name=identifier() Arguments(nt.getArgumentTokens())
	@java
	  nt.setName(name);
	  c.member = nt;
	@end
  | regular_expression(c)
	@java
	  ((RegularExpression)(c.member)).setLhsTokens(lhsTokens);
	  add_inline_regexpr((RegularExpression)(c.member));
	@end
	[ < DOT > t=<IDENTIFIER> @java ((RegularExpression)(c.member)).setRhsToken(t); @end ]
  )
| t=< LPAREN > expansion_choices(c) < RPAREN >
  (  < PLUS > @java c.member = new OneOrMore(t, (Expansion)c.member); @end
   | < STAR > @java c.member = new ZeroOrMore(t, (Expansion)c.member); @end
   | < HOOK > @java c.member = new ZeroOrOne(t, (Expansion)c.member); @end
  )?
}

void regular_expression(Container c) :
@java
    REndOfFile ef;
    String image;
    boolean private_rexp = false;
    Token t = getToken(1);
@end
{
  image=StringLiteral()
  @java
	c.member = new RStringLiteral(t, image);
  @end
| LOOKAHEAD(3)
  @java
	image = "";
  @end
  < LANGLE: "<" >
  [
    [ < HASH >
	@java
	  private_rexp = true;
	@end
    ]
    image=identifier() < COLON >
  ]
  complex_regular_expression_choices(c) < RANGLE: ">" >
  @java
	RegularExpression re;
	if (c.member instanceof RJustName) {
	  RSequence seq = new RSequence();
	  seq.getUnits().add((RegularExpression)c.member);
	  re = seq;
	} else {
	  re = (RegularExpression)c.member;
	}
	re.label = image;
	re.setPrivateRegExp(private_rexp);
    re.setLocation(t);
	c.member = re;
  @end
| LOOKAHEAD(2)
  < LT > image=identifier() < GT >
  @java
	c.member = new RJustName(t, image);
  @end
| < LT > < _EOF > < GT >
  @java
	ef = new REndOfFile();
    ef.setLocation(t);
	ef.ordinal = 0;
	c.member = ef;
  @end
}

void complex_regular_expression_choices(Container c1) :
@java
    boolean morethanone = false;
    RChoice ch = null; // unnecessary initialization to make Java compiler happy!
    Container c2 = new Container();
@end
{
  complex_regular_expression(c1)
  ( < BIT_OR > complex_regular_expression(c2)
	@java
	  if (morethanone) {
	    ch.getChoices().add((RegularExpression)c2.member);
	  } else {
	    morethanone = true;
	    ch = new RChoice();
	    ch.setLocation((RegularExpression)c1.member);
	    ch.getChoices().add((RegularExpression)c1.member);
	    ch.getChoices().add((RegularExpression)c2.member);
	  }
	@end
  )*
  @java
	if (morethanone) {
	  c1.member = ch;
	}
  @end
}

void complex_regular_expression(Container c1) :
@java
    int count = 0;
    RSequence seq = null; // unnecessary initialization to make Java compiler happy!
    Container c2 = new Container();
@end
{
  ( complex_regular_expression_unit(c2)
	@java
	  count++;
	  if (count == 1) {
	    c1.member = c2.member; // if count does not go beyond 1, we are done.
	  } else if (count == 2) { // more than 1, so create a sequence.
	    seq = new RSequence();
	    seq.setLocation((RegularExpression)c1.member);
	    seq.getUnits().add((RegularExpression)c1.member);
	    seq.getUnits().add((RegularExpression)c2.member);
	  } else {
	    seq.getUnits().add((RegularExpression)c2.member);
	  }
	@end
  )+
  @java
	if (count > 1) {
	  c1.member = seq;
	}
  @end
}

void complex_regular_expression_unit(Container c) :
@java
    String image;
    Token t = getToken(1);
    int r1 = 0, r2 = -1;
    boolean hasMax = false;
@end
{
  image=StringLiteral()
  @java
	c.member = new RStringLiteral(t, image);
  @end
| < LT > image=identifier() < GT >
  @java
	c.member = new RJustName(t, image);
  @end
| character_list(c)
| < LPAREN > complex_regular_expression_choices(c) < RPAREN >
  (  < PLUS >
	@java
	  c.member = new ROneOrMore(t, (RegularExpression)c.member);
	@end
   | < STAR >
	@java
	  c.member = new RZeroOrMore(t, (RegularExpression)c.member);
	@end
   | < HOOK >
	@java
	  RZeroOrOne zorexp = new RZeroOrOne();
      zorexp.setLocation(t);
	  zorexp.setRegexpr((RegularExpression)c.member);
	  c.member = zorexp;
	@end
   | < LBRACE > r1 = IntegerLiteral()
      [ < COMMA > @java hasMax = true; @end [ r2 = IntegerLiteral() ] ]
     < RBRACE >
	@java
	  RRepetitionRange rrrexp = new RRepetitionRange();
      rrrexp.setLocation(t);
	  rrrexp.setRegexpr((RegularExpression)c.member, r1, r2, hasMax);
	  c.member = rrrexp;
	@end
  )?
}

void character_list(Container c1) :
@java
    RCharacterList chlist = new RCharacterList();
    Token t = getToken(1);
    chlist.setLocation(t);
    Container c2 = new Container();
@end
{
  [< TILDE >
  @java
	chlist.setNegatedList();
  @end
  ]
  < LBRACKET > [ character_descriptor(c2)
  @java
	chlist.getDescriptors().add(c2.member);
  @end
  ( < COMMA > character_descriptor(c2)
  @java
	chlist.getDescriptors().add(c2.member);
  @end
  )*
  ]
  < RBRACKET >
  @java
	c1.member = chlist;
  @end
}

void character_descriptor(Container c) :
@java
    char c1, c2 = ' '; // unnecessary initialization to make Java compiler happy!
    boolean isrange = false;
    String imageL, imageR;
    Token t = getToken(1);
@end
{
  imageL=StringLiteral()
  @java
	c1 = character_descriptor_assign(getToken(0), imageL);
  @end
  [ < MINUS > imageR=StringLiteral()
  @java
	isrange = true;
	c2 = character_descriptor_assign(getToken(0), imageR, imageL);
  @end
  ]
  @java
	if (isrange) {
	  CharacterRange cr = new CharacterRange();
	  cr.setLocation(t);
      cr.setLeft(c1);
      cr.setRight(c2);
	  c.member = cr;
	} else {
	  SingleCharacter sc = new SingleCharacter();
	  sc.setLocation(t);
	  sc.ch = c1;
	  c.member = sc;
	}
  @end
}

String identifier() :
{
  <IDENTIFIER>
  @java
	return getToken(0).image;
  @end
}

/**********************************************
 * THE JAVA GRAMMAR SPECIFICATION STARTS HERE *
 **********************************************/

/*
 * The following production defines Java identifiers - it
 * includes the reserved words of JavaCC also.
 */

Token TypeParameter() :
{
( <IDENTIFIER>
| < _LOOKAHEAD >
| < _IGNORE_CASE >
| < _PARSER_BEGIN >
| < _PARSER_END >
| < _TOKEN >
| < _SPECIAL_TOKEN >
| < _MORE >
| < _SKIP >
| < _EOF >
)
@java
  Token retval = getToken(0);
  retval.kind = IDENTIFIER;
  return retval;
@end
}

/*
 * Program structuring syntax follows.
 */
void FormalParameters(List<Token> tokens) :
/*
 * Parsing this fills "tokens" with all tokens of the formal
 * parameters excluding the parentheses at each end.
 */
@java
    Token first, last;
@end
{
  < LPAREN >
  @java
	first = getToken(1);
  @end
  [ FormalParameter() ( < COMMA > FormalParameter() )* ]
  @java
	last = getToken(0);
  @end
  < RPAREN >
  @java
	if (last.next != first) { // i.e., this is not an empty sequence
	  Token t = first;
	  while (true) {
	    tokens.add(t);
	    if (t == last) break;
	    t = t.next;
	  }
	}
  @end
}

void FormalParameter() :
{
  Type() TypeParameter()
}


/*
 * Type, name and expression syntax follows.
 */
void Type() :
{
   LOOKAHEAD(2) ClassOrInterfaceType()
 | PrimitiveType()
}

void ClassOrInterfaceType() :
{
  <IDENTIFIER> [ LOOKAHEAD(2) TypeArguments() ]
}

void TypeArguments(List<Token> tokens):
/*
 * Parsing this fills "tokens" with all tokens of the arguments
 * excluding the parentheses at each end.
 */
@java
    Token first, last;
@end
{
  < LT >
  @java
    first = getToken(0);
  @end
  [ ClassOrInterfaceType() ]
  < GT >
  @java
    last = getToken(0);
	if (last.next != first) { // i.e., this is not an empty sequence
	  Token t = first;
	  while (true) {
	    tokens.add(t);
	    if (t == last) break;
	    t = t.next;
	  }
	}
  @end
}


void PrimitiveType() :
{
  < BOOLEAN >
| < CHAR >
| < INT >
}


void ResultType(List<Token> tokens) :
@java
    Token first = getToken(1);
@end
{
  ( < VOID > | Type() )
  @java
	Token last = getToken(0);
	Token t = first;
	while (true) {
      tokens.add(t);
      if (t == last) break;
      t = t.next;
	}
  @end
}

void Name(List<Token> tokens) :
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
@java
    Token first = getToken(1);
@end
{
  TypeParameter()
  ( LOOKAHEAD(2) < DOT > TypeParameter() )*
  @java
	Token last = getToken(0);
	Token t = first;
	while (true) {
	  tokens.add(t);
	  if (t == last) break;
	  t = t.next;
	}
  @end
}


/*
 * Expression syntax follows.
 */

void Expression(List<Token> tokens) :
/*
 * This expansion has been written this way instead of:
 *   Assignment() | ConditionalExpression()
 * for performance reasons.
 * However, it is a weakening of the grammar for it allows the LHS of
 * assignments to be any conditional expression whereas it can only be
 * a primary expression.  Consider adding a semantic predicate to work
 * around this.
 */
@java
    Token first = getToken(1);
@end
{
  PrimaryExpression()
  @java
	Token last = getToken(0);
	Token t = first;
	while (true) {
	  tokens.add(t);
	  if (t == last) break;
	  t = t.next;
	}
  @end
}

void PrimaryExpression() :
{
  PrimaryPrefix() ( LOOKAHEAD(2) PrimarySuffix() )*
}

void PrimaryPrefix() :
{
  Literal()
| < LPAREN > Expression() < RPAREN >
| Name()
}

void PrimarySuffix() :
{
  < LBRACKET > Expression() < RBRACKET >
| Arguments()
}

void Literal() :
{
  < NULL >
| <INTEGER_LITERAL>
| <FLOATING_POINT_LITERAL>
| <CHARACTER_LITERAL>
| <STRING_LITERAL>
| BooleanLiteral()
}

int IntegerLiteral() :
{
  <INTEGER_LITERAL>
  @java
    return Integer.parseInt(token.image);
  @end
}

void BooleanLiteral() :
{
  < TRUE > | < FALSE >
}

String StringLiteral() :
{
  <STRING_LITERAL> @java return remove_escapes_and_quotes(this.token, this.token.image); @end
}

void Arguments(List<Token> tokens) :
/*
 * Parsing this fills "tokens" with all tokens of the arguments
 * excluding the parentheses at each end.
 */
@java
    Token first, last;
@end
{
  < LPAREN >
  @java
    first = getToken(1);
  @end
  [ Expression() ( < COMMA > Expression() )* ]
  @java
    last = getToken(0);
  @end
  < RPAREN >
  @java
    if (last.next != first) { // i.e., this is not an empty sequence
      Token t = first;
      while (true) {
        tokens.add(t);
        if (t == last) break;
	    t = t.next;
      }
    }
  @end
}

/*
 * Statement syntax follows.
 */
void Statement(List<Token> tokens) :
/*
 * Parsing this fills "tokens" with all tokens of the block
 * excluding the braces at each end.
 */
@java
    Token first, last;
@end
{
  < ECODE >
  @java
    tokens.add(getToken(0));
  @end
  < ECODE_END >
| < LBRACE >
  @java
    first = getToken(1);
  @end
  ( Statement() )*
  @java
    last = getToken(0);
  @end
  < RBRACE >
  @java
    if (last.next != first) { // i.e., this is not an empty sequence
      Token t = first;
      while (true) {
        tokens.add(t);
        if (t == last) break;
	    t = t.next;
	  }
	}
  @end
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<PART_LETTER>)* >
| < #LETTER:
    [ // all chars for which Character.isIdentifierStart is true
      "$",
      "A"-"Z",
      "_",
      "a"-"z",
      "\u00a2"-"\u00a5",
      "\u00aa",
      "\u00b5",
      "\u00ba",
      "\u00c0"-"\u00d6",
      "\u00d8"-"\u00f6",
      "\u00f8"-"\u021f",
      "\u0222"-"\u0233",
      "\u0250"-"\u02ad",
      "\u02b0"-"\u02b8",
      "\u02bb"-"\u02c1",
      "\u02d0"-"\u02d1",
      "\u02e0"-"\u02e4",
      "\u02ee",
      "\u037a",
      "\u0386",
      "\u0388"-"\u038a",
      "\u038c",
      "\u038e"-"\u03a1",
      "\u03a3"-"\u03ce",
      "\u03d0"-"\u03d7",
      "\u03da"-"\u03f3",
      "\u0400"-"\u0481",
      "\u048c"-"\u04c4",
      "\u04c7"-"\u04c8",
      "\u04cb"-"\u04cc",
      "\u04d0"-"\u04f5",
      "\u04f8"-"\u04f9",
      "\u0531"-"\u0556",
      "\u0559",
      "\u0561"-"\u0587",
      "\u05d0"-"\u05ea",
      "\u05f0"-"\u05f2",
      "\u0621"-"\u063a",
      "\u0640"-"\u064a",
      "\u0671"-"\u06d3",
      "\u06d5",
      "\u06e5"-"\u06e6",
      "\u06fa"-"\u06fc",
      "\u0710",
      "\u0712"-"\u072c",
      "\u0780"-"\u07a5",
      "\u0905"-"\u0939",
      "\u093d",
      "\u0950",
      "\u0958"-"\u0961",
      "\u0985"-"\u098c",
      "\u098f"-"\u0990",
      "\u0993"-"\u09a8",
      "\u09aa"-"\u09b0",
      "\u09b2",
      "\u09b6"-"\u09b9",
      "\u09dc"-"\u09dd",
      "\u09df"-"\u09e1",
      "\u09f0"-"\u09f3",
      "\u0a05"-"\u0a0a",
      "\u0a0f"-"\u0a10",
      "\u0a13"-"\u0a28",
      "\u0a2a"-"\u0a30",
      "\u0a32"-"\u0a33",
      "\u0a35"-"\u0a36",
      "\u0a38"-"\u0a39",
      "\u0a59"-"\u0a5c",
      "\u0a5e",
      "\u0a72"-"\u0a74",
      "\u0a85"-"\u0a8b",
      "\u0a8d",
      "\u0a8f"-"\u0a91",
      "\u0a93"-"\u0aa8",
      "\u0aaa"-"\u0ab0",
      "\u0ab2"-"\u0ab3",
      "\u0ab5"-"\u0ab9",
      "\u0abd",
      "\u0ad0",
      "\u0ae0",
      "\u0b05"-"\u0b0c",
      "\u0b0f"-"\u0b10",
      "\u0b13"-"\u0b28",
      "\u0b2a"-"\u0b30",
      "\u0b32"-"\u0b33",
      "\u0b36"-"\u0b39",
      "\u0b3d",
      "\u0b5c"-"\u0b5d",
      "\u0b5f"-"\u0b61",
      "\u0b85"-"\u0b8a",
      "\u0b8e"-"\u0b90",
      "\u0b92"-"\u0b95",
      "\u0b99"-"\u0b9a",
      "\u0b9c",
      "\u0b9e"-"\u0b9f",
      "\u0ba3"-"\u0ba4",
      "\u0ba8"-"\u0baa",
      "\u0bae"-"\u0bb5",
      "\u0bb7"-"\u0bb9",
      "\u0c05"-"\u0c0c",
      "\u0c0e"-"\u0c10",
      "\u0c12"-"\u0c28",
      "\u0c2a"-"\u0c33",
      "\u0c35"-"\u0c39",
      "\u0c60"-"\u0c61",
      "\u0c85"-"\u0c8c",
      "\u0c8e"-"\u0c90",
      "\u0c92"-"\u0ca8",
      "\u0caa"-"\u0cb3",
      "\u0cb5"-"\u0cb9",
      "\u0cde",
      "\u0ce0"-"\u0ce1",
      "\u0d05"-"\u0d0c",
      "\u0d0e"-"\u0d10",
      "\u0d12"-"\u0d28",
      "\u0d2a"-"\u0d39",
      "\u0d60"-"\u0d61",
      "\u0d85"-"\u0d96",
      "\u0d9a"-"\u0db1",
      "\u0db3"-"\u0dbb",
      "\u0dbd",
      "\u0dc0"-"\u0dc6",
      "\u0e01"-"\u0e30",
      "\u0e32"-"\u0e33",
      "\u0e3f"-"\u0e46",
      "\u0e81"-"\u0e82",
      "\u0e84",
      "\u0e87"-"\u0e88",
      "\u0e8a",
      "\u0e8d",
      "\u0e94"-"\u0e97",
      "\u0e99"-"\u0e9f",
      "\u0ea1"-"\u0ea3",
      "\u0ea5",
      "\u0ea7",
      "\u0eaa"-"\u0eab",
      "\u0ead"-"\u0eb0",
      "\u0eb2"-"\u0eb3",
      "\u0ebd",
      "\u0ec0"-"\u0ec4",
      "\u0ec6",
      "\u0edc"-"\u0edd",
      "\u0f00",
      "\u0f40"-"\u0f47",
      "\u0f49"-"\u0f6a",
      "\u0f88"-"\u0f8b",
      "\u1000"-"\u1021",
      "\u1023"-"\u1027",
      "\u1029"-"\u102a",
      "\u1050"-"\u1055",
      "\u10a0"-"\u10c5",
      "\u10d0"-"\u10f6",
      "\u1100"-"\u1159",
      "\u115f"-"\u11a2",
      "\u11a8"-"\u11f9",
      "\u1200"-"\u1206",
      "\u1208"-"\u1246",
      "\u1248",
      "\u124a"-"\u124d",
      "\u1250"-"\u1256",
      "\u1258",
      "\u125a"-"\u125d",
      "\u1260"-"\u1286",
      "\u1288",
      "\u128a"-"\u128d",
      "\u1290"-"\u12ae",
      "\u12b0",
      "\u12b2"-"\u12b5",
      "\u12b8"-"\u12be",
      "\u12c0",
      "\u12c2"-"\u12c5",
      "\u12c8"-"\u12ce",
      "\u12d0"-"\u12d6",
      "\u12d8"-"\u12ee",
      "\u12f0"-"\u130e",
      "\u1310",
      "\u1312"-"\u1315",
      "\u1318"-"\u131e",
      "\u1320"-"\u1346",
      "\u1348"-"\u135a",
      "\u13a0"-"\u13f4",
      "\u1401"-"\u166c",
      "\u166f"-"\u1676",
      "\u1681"-"\u169a",
      "\u16a0"-"\u16ea",
      "\u1780"-"\u17b3",
      "\u17db",
      "\u1820"-"\u1877",
      "\u1880"-"\u18a8",
      "\u1e00"-"\u1e9b",
      "\u1ea0"-"\u1ef9",
      "\u1f00"-"\u1f15",
      "\u1f18"-"\u1f1d",
      "\u1f20"-"\u1f45",
      "\u1f48"-"\u1f4d",
      "\u1f50"-"\u1f57",
      "\u1f59",
      "\u1f5b",
      "\u1f5d",
      "\u1f5f"-"\u1f7d",
      "\u1f80"-"\u1fb4",
      "\u1fb6"-"\u1fbc",
      "\u1fbe",
      "\u1fc2"-"\u1fc4",
      "\u1fc6"-"\u1fcc",
      "\u1fd0"-"\u1fd3",
      "\u1fd6"-"\u1fdb",
      "\u1fe0"-"\u1fec",
      "\u1ff2"-"\u1ff4",
      "\u1ff6"-"\u1ffc",
      "\u203f"-"\u2040",
      "\u207f",
      "\u20a0"-"\u20af",
      "\u2102",
      "\u2107",
      "\u210a"-"\u2113",
      "\u2115",
      "\u2119"-"\u211d",
      "\u2124",
      "\u2126",
      "\u2128",
      "\u212a"-"\u212d",
      "\u212f"-"\u2131",
      "\u2133"-"\u2139",
      "\u2160"-"\u2183",
      "\u3005"-"\u3007",
      "\u3021"-"\u3029",
      "\u3031"-"\u3035",
      "\u3038"-"\u303a",
      "\u3041"-"\u3094",
      "\u309d"-"\u309e",
      "\u30a1"-"\u30fe",
      "\u3105"-"\u312c",
      "\u3131"-"\u318e",
      "\u31a0"-"\u31b7",
      "\u3400"-"\u4db5",
      "\u4e00"-"\u9fa5",
      "\ua000"-"\ua48c",
      "\uac00"-"\ud7a3",
      "\uf900"-"\ufa2d",
      "\ufb00"-"\ufb06",
      "\ufb13"-"\ufb17",
      "\ufb1d",
      "\ufb1f"-"\ufb28",
      "\ufb2a"-"\ufb36",
      "\ufb38"-"\ufb3c",
      "\ufb3e",
      "\ufb40"-"\ufb41",
      "\ufb43"-"\ufb44",
      "\ufb46"-"\ufbb1",
      "\ufbd3"-"\ufd3d",
      "\ufd50"-"\ufd8f",
      "\ufd92"-"\ufdc7",
      "\ufdf0"-"\ufdfb",
      "\ufe33"-"\ufe34",
      "\ufe4d"-"\ufe4f",
      "\ufe69",
      "\ufe70"-"\ufe72",
      "\ufe74",
      "\ufe76"-"\ufefc",
      "\uff04",
      "\uff21"-"\uff3a",
      "\uff3f",
      "\uff41"-"\uff5a",
      "\uff65"-"\uffbe",
      "\uffc2"-"\uffc7",
      "\uffca"-"\uffcf",
      "\uffd2"-"\uffd7",
      "\uffda"-"\uffdc",
      "\uffe0"-"\uffe1",
      "\uffe5"-"\uffe6"
    ]
  >
| < #PART_LETTER:
    [ // all chars for which Character.isIdentifierPart is true
      "\u0000"-"\u0008",
      "\u000e"-"\u001b",
      "$",
      "0"-"9",
      "A"-"Z",
      "_",
      "a"-"z",
      "\u007f"-"\u009f",
      "\u00a2"-"\u00a5",
      "\u00aa",
      "\u00b5",
      "\u00ba",
      "\u00c0"-"\u00d6",
      "\u00d8"-"\u00f6",
      "\u00f8"-"\u021f",
      "\u0222"-"\u0233",
      "\u0250"-"\u02ad",
      "\u02b0"-"\u02b8",
      "\u02bb"-"\u02c1",
      "\u02d0"-"\u02d1",
      "\u02e0"-"\u02e4",
      "\u02ee",
      "\u0300"-"\u034e",
      "\u0360"-"\u0362",
      "\u037a",
      "\u0386",
      "\u0388"-"\u038a",
      "\u038c",
      "\u038e"-"\u03a1",
      "\u03a3"-"\u03ce",
      "\u03d0"-"\u03d7",
      "\u03da"-"\u03f3",
      "\u0400"-"\u0481",
      "\u0483"-"\u0486",
      "\u048c"-"\u04c4",
      "\u04c7"-"\u04c8",
      "\u04cb"-"\u04cc",
      "\u04d0"-"\u04f5",
      "\u04f8"-"\u04f9",
      "\u0531"-"\u0556",
      "\u0559",
      "\u0561"-"\u0587",
      "\u0591"-"\u05a1",
      "\u05a3"-"\u05b9",
      "\u05bb"-"\u05bd",
      "\u05bf",
      "\u05c1"-"\u05c2",
      "\u05c4",
      "\u05d0"-"\u05ea",
      "\u05f0"-"\u05f2",
      "\u0621"-"\u063a",
      "\u0640"-"\u0655",
      "\u0660"-"\u0669",
      "\u0670"-"\u06d3",
      "\u06d5"-"\u06dc",
      "\u06df"-"\u06e8",
      "\u06ea"-"\u06ed",
      "\u06f0"-"\u06fc",
      "\u070f"-"\u072c",
      "\u0730"-"\u074a",
      "\u0780"-"\u07b0",
      "\u0901"-"\u0903",
      "\u0905"-"\u0939",
      "\u093c"-"\u094d",
      "\u0950"-"\u0954",
      "\u0958"-"\u0963",
      "\u0966"-"\u096f",
      "\u0981"-"\u0983",
      "\u0985"-"\u098c",
      "\u098f"-"\u0990",
      "\u0993"-"\u09a8",
      "\u09aa"-"\u09b0",
      "\u09b2",
      "\u09b6"-"\u09b9",
      "\u09bc",
      "\u09be"-"\u09c4",
      "\u09c7"-"\u09c8",
      "\u09cb"-"\u09cd",
      "\u09d7",
      "\u09dc"-"\u09dd",
      "\u09df"-"\u09e3",
      "\u09e6"-"\u09f3",
      "\u0a02",
      "\u0a05"-"\u0a0a",
      "\u0a0f"-"\u0a10",
      "\u0a13"-"\u0a28",
      "\u0a2a"-"\u0a30",
      "\u0a32"-"\u0a33",
      "\u0a35"-"\u0a36",
      "\u0a38"-"\u0a39",
      "\u0a3c",
      "\u0a3e"-"\u0a42",
      "\u0a47"-"\u0a48",
      "\u0a4b"-"\u0a4d",
      "\u0a59"-"\u0a5c",
      "\u0a5e",
      "\u0a66"-"\u0a74",
      "\u0a81"-"\u0a83",
      "\u0a85"-"\u0a8b",
      "\u0a8d",
      "\u0a8f"-"\u0a91",
      "\u0a93"-"\u0aa8",
      "\u0aaa"-"\u0ab0",
      "\u0ab2"-"\u0ab3",
      "\u0ab5"-"\u0ab9",
      "\u0abc"-"\u0ac5",
      "\u0ac7"-"\u0ac9",
      "\u0acb"-"\u0acd",
      "\u0ad0",
      "\u0ae0",
      "\u0ae6"-"\u0aef",
      "\u0b01"-"\u0b03",
      "\u0b05"-"\u0b0c",
      "\u0b0f"-"\u0b10",
      "\u0b13"-"\u0b28",
      "\u0b2a"-"\u0b30",
      "\u0b32"-"\u0b33",
      "\u0b36"-"\u0b39",
      "\u0b3c"-"\u0b43",
      "\u0b47"-"\u0b48",
      "\u0b4b"-"\u0b4d",
      "\u0b56"-"\u0b57",
      "\u0b5c"-"\u0b5d",
      "\u0b5f"-"\u0b61",
      "\u0b66"-"\u0b6f",
      "\u0b82"-"\u0b83",
      "\u0b85"-"\u0b8a",
      "\u0b8e"-"\u0b90",
      "\u0b92"-"\u0b95",
      "\u0b99"-"\u0b9a",
      "\u0b9c",
      "\u0b9e"-"\u0b9f",
      "\u0ba3"-"\u0ba4",
      "\u0ba8"-"\u0baa",
      "\u0bae"-"\u0bb5",
      "\u0bb7"-"\u0bb9",
      "\u0bbe"-"\u0bc2",
      "\u0bc6"-"\u0bc8",
      "\u0bca"-"\u0bcd",
      "\u0bd7",
      "\u0be7"-"\u0bef",
      "\u0c01"-"\u0c03",
      "\u0c05"-"\u0c0c",
      "\u0c0e"-"\u0c10",
      "\u0c12"-"\u0c28",
      "\u0c2a"-"\u0c33",
      "\u0c35"-"\u0c39",
      "\u0c3e"-"\u0c44",
      "\u0c46"-"\u0c48",
      "\u0c4a"-"\u0c4d",
      "\u0c55"-"\u0c56",
      "\u0c60"-"\u0c61",
      "\u0c66"-"\u0c6f",
      "\u0c82"-"\u0c83",
      "\u0c85"-"\u0c8c",
      "\u0c8e"-"\u0c90",
      "\u0c92"-"\u0ca8",
      "\u0caa"-"\u0cb3",
      "\u0cb5"-"\u0cb9",
      "\u0cbe"-"\u0cc4",
      "\u0cc6"-"\u0cc8",
      "\u0cca"-"\u0ccd",
      "\u0cd5"-"\u0cd6",
      "\u0cde",
      "\u0ce0"-"\u0ce1",
      "\u0ce6"-"\u0cef",
      "\u0d02"-"\u0d03",
      "\u0d05"-"\u0d0c",
      "\u0d0e"-"\u0d10",
      "\u0d12"-"\u0d28",
      "\u0d2a"-"\u0d39",
      "\u0d3e"-"\u0d43",
      "\u0d46"-"\u0d48",
      "\u0d4a"-"\u0d4d",
      "\u0d57",
      "\u0d60"-"\u0d61",
      "\u0d66"-"\u0d6f",
      "\u0d82"-"\u0d83",
      "\u0d85"-"\u0d96",
      "\u0d9a"-"\u0db1",
      "\u0db3"-"\u0dbb",
      "\u0dbd",
      "\u0dc0"-"\u0dc6",
      "\u0dca",
      "\u0dcf"-"\u0dd4",
      "\u0dd6",
      "\u0dd8"-"\u0ddf",
      "\u0df2"-"\u0df3",
      "\u0e01"-"\u0e3a",
      "\u0e3f"-"\u0e4e",
      "\u0e50"-"\u0e59",
      "\u0e81"-"\u0e82",
      "\u0e84",
      "\u0e87"-"\u0e88",
      "\u0e8a",
      "\u0e8d",
      "\u0e94"-"\u0e97",
      "\u0e99"-"\u0e9f",
      "\u0ea1"-"\u0ea3",
      "\u0ea5",
      "\u0ea7",
      "\u0eaa"-"\u0eab",
      "\u0ead"-"\u0eb9",
      "\u0ebb"-"\u0ebd",
      "\u0ec0"-"\u0ec4",
      "\u0ec6",
      "\u0ec8"-"\u0ecd",
      "\u0ed0"-"\u0ed9",
      "\u0edc"-"\u0edd",
      "\u0f00",
      "\u0f18"-"\u0f19",
      "\u0f20"-"\u0f29",
      "\u0f35",
      "\u0f37",
      "\u0f39",
      "\u0f3e"-"\u0f47",
      "\u0f49"-"\u0f6a",
      "\u0f71"-"\u0f84",
      "\u0f86"-"\u0f8b",
      "\u0f90"-"\u0f97",
      "\u0f99"-"\u0fbc",
      "\u0fc6",
      "\u1000"-"\u1021",
      "\u1023"-"\u1027",
      "\u1029"-"\u102a",
      "\u102c"-"\u1032",
      "\u1036"-"\u1039",
      "\u1040"-"\u1049",
      "\u1050"-"\u1059",
      "\u10a0"-"\u10c5",
      "\u10d0"-"\u10f6",
      "\u1100"-"\u1159",
      "\u115f"-"\u11a2",
      "\u11a8"-"\u11f9",
      "\u1200"-"\u1206",
      "\u1208"-"\u1246",
      "\u1248",
      "\u124a"-"\u124d",
      "\u1250"-"\u1256",
      "\u1258",
      "\u125a"-"\u125d",
      "\u1260"-"\u1286",
      "\u1288",
      "\u128a"-"\u128d",
      "\u1290"-"\u12ae",
      "\u12b0",
      "\u12b2"-"\u12b5",
      "\u12b8"-"\u12be",
      "\u12c0",
      "\u12c2"-"\u12c5",
      "\u12c8"-"\u12ce",
      "\u12d0"-"\u12d6",
      "\u12d8"-"\u12ee",
      "\u12f0"-"\u130e",
      "\u1310",
      "\u1312"-"\u1315",
      "\u1318"-"\u131e",
      "\u1320"-"\u1346",
      "\u1348"-"\u135a",
      "\u1369"-"\u1371",
      "\u13a0"-"\u13f4",
      "\u1401"-"\u166c",
      "\u166f"-"\u1676",
      "\u1681"-"\u169a",
      "\u16a0"-"\u16ea",
      "\u1780"-"\u17d3",
      "\u17db",
      "\u17e0"-"\u17e9",
      "\u180b"-"\u180e",
      "\u1810"-"\u1819",
      "\u1820"-"\u1877",
      "\u1880"-"\u18a9",
      "\u1e00"-"\u1e9b",
      "\u1ea0"-"\u1ef9",
      "\u1f00"-"\u1f15",
      "\u1f18"-"\u1f1d",
      "\u1f20"-"\u1f45",
      "\u1f48"-"\u1f4d",
      "\u1f50"-"\u1f57",
      "\u1f59",
      "\u1f5b",
      "\u1f5d",
      "\u1f5f"-"\u1f7d",
      "\u1f80"-"\u1fb4",
      "\u1fb6"-"\u1fbc",
      "\u1fbe",
      "\u1fc2"-"\u1fc4",
      "\u1fc6"-"\u1fcc",
      "\u1fd0"-"\u1fd3",
      "\u1fd6"-"\u1fdb",
      "\u1fe0"-"\u1fec",
      "\u1ff2"-"\u1ff4",
      "\u1ff6"-"\u1ffc",
      "\u200c"-"\u200f",
      "\u202a"-"\u202e",
      "\u203f"-"\u2040",
      "\u206a"-"\u206f",
      "\u207f",
      "\u20a0"-"\u20af",
      "\u20d0"-"\u20dc",
      "\u20e1",
      "\u2102",
      "\u2107",
      "\u210a"-"\u2113",
      "\u2115",
      "\u2119"-"\u211d",
      "\u2124",
      "\u2126",
      "\u2128",
      "\u212a"-"\u212d",
      "\u212f"-"\u2131",
      "\u2133"-"\u2139",
      "\u2160"-"\u2183",
      "\u3005"-"\u3007",
      "\u3021"-"\u302f",
      "\u3031"-"\u3035",
      "\u3038"-"\u303a",
      "\u3041"-"\u3094",
      "\u3099"-"\u309a",
      "\u309d"-"\u309e",
      "\u30a1"-"\u30fe",
      "\u3105"-"\u312c",
      "\u3131"-"\u318e",
      "\u31a0"-"\u31b7",
      "\u3400"-"\u4db5",
      "\u4e00"-"\u9fa5",
      "\ua000"-"\ua48c",
      "\uac00"-"\ud7a3",
      "\uf900"-"\ufa2d",
      "\ufb00"-"\ufb06",
      "\ufb13"-"\ufb17",
      "\ufb1d"-"\ufb28",
      "\ufb2a"-"\ufb36",
      "\ufb38"-"\ufb3c",
      "\ufb3e",
      "\ufb40"-"\ufb41",
      "\ufb43"-"\ufb44",
      "\ufb46"-"\ufbb1",
      "\ufbd3"-"\ufd3d",
      "\ufd50"-"\ufd8f",
      "\ufd92"-"\ufdc7",
      "\ufdf0"-"\ufdfb",
      "\ufe20"-"\ufe23",
      "\ufe33"-"\ufe34",
      "\ufe4d"-"\ufe4f",
      "\ufe69",
      "\ufe70"-"\ufe72",
      "\ufe74",
      "\ufe76"-"\ufefc",
      "\ufeff",
      "\uff04",
      "\uff10"-"\uff19",
      "\uff21"-"\uff3a",
      "\uff3f",
      "\uff41"-"\uff5a",
      "\uff65"-"\uffbe",
      "\uffc2"-"\uffc7",
      "\uffca"-"\uffcf",
      "\uffd2"-"\uffd7",
      "\uffda"-"\uffdc",
      "\uffe0"-"\uffe1",
      "\uffe5"-"\uffe6",
      "\ufff9"-"\ufffb"
    ]
  >
}