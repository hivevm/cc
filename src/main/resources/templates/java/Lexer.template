package {{PACKAGE}};

/** Token Manager. */
class {{PARSER_NAME}}TokenManager@if(LEXER) extends {{LEXER}}@fi implements {{PARSER_NAME}}Constants {

@foreach(index : LOHI_BYTES)
static final long[] jjbitVec{{index}} = { {{index.bytes}} };
@end
@foreach(name: STATES)
{{name.NfaAndDfa}}
@end
/** Token literal values. */
public static final String[] jjstrLiteralImages = {
{{LITERAL_IMAGES}}};

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
@if(keepLineCol)
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
@fi
@if(hasEmptyMatch)
   if (jjmatchedPos < 0)
   {
      if (image == null)
         curTokenImage = "";
      else
         curTokenImage = image.toString();

@if(keepLineCol)
        beginLine = endLine = input_stream.getEndLine();
        beginColumn = endColumn = input_stream.getEndColumn();
@fi
   } else {
      String im = jjstrLiteralImages[jjmatchedKind];
      curTokenImage = (im == null) ? input_stream.GetImage() : im;
@if(keepLineCol)
        beginLine = input_stream.getBeginLine();
        beginColumn = input_stream.getBeginColumn();
        endLine = input_stream.getEndLine();
        endColumn = input_stream.getEndColumn();
@fi
   }
@else
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
@if(keepLineCol)
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
@fi
@fi
   t = new Token(jjmatchedKind, curTokenImage);
@if(keepLineCol)
   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;
@fi
   return t;
}

{{DumpStateSets}}
@foreach(nfa : NON_ASCII_TABLE)
private static final boolean jjCanMove_{{nfa.NON_ASCII_METHOD}}(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
{{nfa.ASCII_MOVE}}
         return false;
   }
}

@end
{{DumpGetNextToken}}
@if(DEBUG_TOKEN_MANAGER)
protected static final int[][][] statesForState = {{STATES_FOR_STATE}};
protected static final int[][] kindForState = {{KIND_FOR_STATE}};
@fi
@if(hasLoop)
	int[] jjemptyLineNo = new int[{{maxLexStates}}];
	int[] jjemptyColNo = new int[{{maxLexStates}}];
boolean[] jjbeenHere = new boolean[{{maxLexStates}}];
@fi
void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
{{DumpSkipActions}}
      default :
         break;
   }
}

void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
{{DumpMoreActions}}
      default :
         break;
   }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
{{DumpTokenActions}}
      default :
         break;
   }
}


private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

@if(jjCheckNAddStatesDualNeeded)
private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

@fi
@if(jjCheckNAddStatesUnaryNeeded)
private void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}

@fi

    /** Constructor. */
    public {{PARSER_NAME}}TokenManager(JavaCharStream stream) {

    input_stream = stream;
  }

  /** Constructor. */
  public {{PARSER_NAME}}TokenManager(JavaCharStream stream, int lexState) {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream)
  {
    jjmatchedPos = 0;
    jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = {{stateSetSize}}; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream, int lexState)  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= {{lexStateNameLength}} || lexState < 0)
      throw new TokenException("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenException.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

{{dumpStaticVarDeclarations}}

    private JavaCharStream  input_stream;
    private final int[] jjrounds = new int[{{stateSetSize}}];
    private final int[] jjstateSet = new int[2 * {{stateSetSize}}];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}