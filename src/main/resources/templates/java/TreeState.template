package {{PACKAGE}};

public class JJT{{PARSER_NAME}}State {

  private final java.util.List<Node>    nodes;
  private final java.util.List<Integer> marks;

  private int                           sp;          // number of nodes on stack
  private int                           mk;          // current mark
  private boolean                       node_created;

  public JJT{{PARSER_NAME}}State() {
    this.nodes = new java.util.ArrayList<>();
    this.marks = new java.util.ArrayList<>();
    this.sp = 0;
    this.mk = 0;
  }

  /*
   * Determines whether the current node was actually closed and pushed. This should only be called
   * in the final user action of a node scope.
   */
  public boolean nodeCreated() {
    return this.node_created;
  }

  /*
   * Call this to reinitialize the node stack. It is called automatically by the parser's ReInit()
   * method.
   */
  public void reset() {
    this.nodes.clear();
    this.marks.clear();
    this.sp = 0;
    this.mk = 0;
  }

  /*
   * Returns the root node of the AST. It only makes sense to call this after a successful parse.
   */
  public Node rootNode() {
    return this.nodes.get(0);
  }

  /* Pushes a node on to the stack. */
  public void pushNode(Node n) {
    this.nodes.add(n);
    ++this.sp;
  }

  /*
   * Returns the node on the top of the stack, and remove it from the stack.
   */
  public Node popNode() {
    if (--this.sp < this.mk) {
      this.mk = this.marks.remove(this.marks.size() - 1);
    }
    return this.nodes.remove(this.nodes.size() - 1);
  }

  /* Returns the node currently on the top of the stack. */
  public Node peekNode() {
    return this.nodes.get(this.nodes.size() - 1);
  }

  /*
   * Returns the number of children on the stack in the current node scope.
   */
  public int nodeArity() {
    return this.sp - this.mk;
  }


  public void clearNodeScope(Node n) {
    while (this.sp > this.mk) {
      popNode();
    }
    this.mk = this.marks.remove(this.marks.size() - 1);
  }


  public void openNodeScope(Node n) {
    this.marks.add(this.mk);
    this.mk = this.sp;
    n.jjtOpen();
  }


  /*
   * A definite node is constructed from a specified number of children. That number of nodes are
   * popped from the stack and made the children of the definite node. Then the definite node is
   * pushed on to the stack.
   */
  public void closeNodeScope(Node n, int num) {
    this.mk = this.marks.remove(this.marks.size() - 1);
    while (num-- > 0) {
      Node c = popNode();
      c.jjtSetParent(n);
      n.jjtAddChild(c, num);
    }
    n.jjtClose();
    pushNode(n);
    this.node_created = true;
  }


  /*
   * A conditional node is constructed if its condition is true. All the nodes that have been pushed
   * since the node was opened are made children of the conditional node, which is then pushed on to
   * the stack. If the condition is false the node is not constructed and they are left on the
   * stack.
   */
  public void closeNodeScope(Node n, boolean condition) {
    if (condition) {
      int a = nodeArity();
      this.mk = this.marks.remove(this.marks.size() - 1);
      while (a-- > 0) {
        Node c = popNode();
        c.jjtSetParent(n);
        n.jjtAddChild(c, a);
      }
      n.jjtClose();
      pushNode(n);
      this.node_created = true;
    } else {
      this.mk = this.marks.remove(this.marks.size() - 1);
      this.node_created = false;
    }
  }
}
