#include "{{PARSER_NAME}}TokenManager.h"
#include "TokenManagerError.h"
#include "TokenManagerErrorHandler.h"


@foreach lohiBytes
static const unsigned long long jjbitVec{{$}}[] = {{getLohiBytes()}};
@end
{{DumpStrLiteralImages()}}
{{DumpStateSets()}}
@if DEBUG_TOKEN_MANAGER
{{DumpStatesForStateCPP()}}
{{DumpStatesForKind()}}
@fi
@if hasLoop
static int  jjemptyLineNo[{{maxLexStates}}];
static int  jjemptyColNo[{{maxLexStates}}];
static bool jjbeenHere[{{maxLexStates}}];
@fi
{{DumpStaticVarDeclarations()}}
@if NAMESPACE
namespace {{NAMESPACE}} {
@fi

  void {{PARSER_NAME}}TokenManager::setDebugStream(FILE *ds) { debugStream = ds; }
@foreach stateNames
{{dumpNfaAndDfa()}}
@end

Token * {{PARSER_NAME}}TokenManager::jjFillToken() {
   Token *t;
   JJString curTokenImage;
@if keepLineCol
   int beginLine   = -1;
   int endLine     = -1;
   int beginColumn = -1;
   int endColumn   = -1;
@fi
@if hasEmptyMatch
   if (jjmatchedPos < 0)
   {
       curTokenImage = image.c_str();
@if keepLineCol
     if (reader->getTrackLineColumn()) {
        beginLine = endLine = reader->getEndLine();
        beginColumn = endColumn = reader->getEndColumn();
     }
@fi
   } else {
     JJString im = jjstrLiteralImages[jjmatchedKind];
     curTokenImage = (im.length() == 0) ? reader->getImage() : im;
@if keepLineCol
    if (reader->getTrackLineColumn()) {
        beginLine = reader->getBeginLine();
        beginColumn = reader->getBeginColumn();
        endLine = reader->getEndLine();
        endColumn = reader->getEndColumn();
    }
@fi
   }
@else
   JJString im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im.length() == 0) ? reader->getImage() : im;
@if keepLineCol
   if (reader->getTrackLineColumn()) {
     beginLine = reader->getBeginLine();
     beginColumn = reader->getBeginColumn();
     endLine = reader->getEndLine();
     endColumn = reader->getEndColumn();
   }
@fi
@fi
   t = Token::newToken(jjmatchedKind, curTokenImage);
@if keepLineCol

   t->beginLine() = beginLine;
   t->endLine() = endLine;
   t->beginColumn() = beginColumn;
   t->endColumn() = endColumn;
@fi

   return t;
}
@foreach nonAsciiTableForMethod
{{DumpNonAsciiMoveMethod()}}
@end
{{DumpGetNextToken()}}
@if hasSkipActions
{{DumpSkipActions()}}
@fi
@if data.hasMoreActions
{{DumpMoreActions(}}
@fi
@if hasTokenActions) {
{{DumpTokenActions()}}
@fi
/** Reinitialise parser. */
void {{PARSER_NAME}}TokenManager::ReInit(Reader * stream, int lexState)
{
    clear();
    jjmatchedPos = jjnewStateCnt = 0;
    defaultLexState = 0;
    curLexState = 0;
    reader = stream;
    ReInitRounds();
    debugStream = stdout; // init
    SwitchTo(lexState);
    errorHandler = new TokenManagerErrorHandler();
}

  void {{PARSER_NAME}}TokenManager::ReInitRounds() {
    int i;
    jjround = 0x80000001;
    for (i = {{stateSetSize}}; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

/** Switch to specified lex state. */
void {{PARSER_NAME}}TokenManager::SwitchTo(int lexState)
{
    if (lexState > {{lexStateName}} || lexState < DEFAULT) {
      JJString message;
      message += JJWIDE(Error: Ignoring invalid lexical state : );
      message += lexState; message += JJWIDE(. State unchanged.);
      throw new TokenManagerError(message, INVALID_LEXICAL_STATE);
    } else
      curLexState = lexState;
}

void OQLTokenManager::lexicalError() {
	std::clog << "Lexical error encountered." << std::endl;
}
const  TokenManagerErrorHandler* OQLTokenManager::getErrorHandler() const {
  return errorHandler;
}

  /** Constructor. */
  {{PARSER_NAME}}TokenManager::{{PARSER_NAME}}TokenManager(Reader * stream, int lexState)
  {
    reader = nullptr;
    ReInit(stream, lexState);
  }

  // Destructor
  {{PARSER_NAME}}TokenManager::~{{PARSER_NAME}}TokenManager() {
    clear();
  }

  // clear
  void {{PARSER_NAME}}TokenManager::clear() {
    //Since reader was generated outside of TokenManager
    //TokenManager should not take care of deleting it
    //if (reader) delete reader;
    if (errorHandler) delete errorHandler, errorHandler = nullptr;    
  }

@if NAMESPACE
}
@fi