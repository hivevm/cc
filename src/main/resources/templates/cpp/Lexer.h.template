
#include "JavaCC.h"
#include "Reader.h"
#include "Token.h"
#include "ParserErrorHandler.h"
#include "TokenManager.h"
#include "{{PARSER_NAME}}Constants.h"

@if(NAMESPACE)
namespace {{NAMESPACE}} {
@fi

class {{PARSER_NAME}}TokenManager : public TokenManager {
public:

  FILE *debugStream;
  void setDebugStream(FILE *ds);
@foreach(name : STATES)
{{name.head}}
@end
Token * jjFillToken();
@foreach(nfa : NON_ASCII_TABLE)
bool jjCanMove_{{nfa.offset}}(int hiByte, int i1, int i2, unsigned long long l1, unsigned long long l2);
@end
public:
  int defaultLexState;
  int curLexState = 0;
  int jjnewStateCnt = 0;
  int jjround = 0;
  int jjmatchedPos = 0;
  int jjmatchedKind = 0;

Token * getNextToken();
@if(hasSkipActions)
void SkipLexicalActions(Token *matchedToken);
@fi
@if(hasMoreActions)
void MoreLexicalActions();
@fi
@if(hasTokenActions)
void TokenLexicalActions(Token *matchedToken);
@fi
#define jjCheckNAdd(state)\
{\
   if (jjrounds[state] != jjround)\
   {\
      jjstateSet[jjnewStateCnt++] = state;\
      jjrounds[state] = jjround;\
   }\
}
#define jjAddStates(start, end)\
{\
   for (int x = start; x <= end; x++) {\
      jjstateSet[jjnewStateCnt++] = jjnextStates[x];\
   } /*while (start++ != end);*/\
}
#define jjCheckNAddTwoStates(state1, state2)\
{\
   jjCheckNAdd(state1);\
   jjCheckNAdd(state2);\
}

@if(jjCheckNAddStatesDualNeeded)
#define jjCheckNAddStates(start, end)\
{\
   for (int x = start; x <= end; x++) {\
      jjCheckNAdd(jjnextStates[x]);\
   } /*while (start++ != end);*/\
}

@fi
@if(jjCheckNAddStatesUnaryNeeded)
#define jjCheckNAddStates(start)\
{\
   jjCheckNAdd(jjnextStates[start]);\
   jjCheckNAdd(jjnextStates[start + 1]);\
}
@fi
  Reader*        reader;

private:
  void ReInitRounds();

public:
  {{PARSER_NAME}}TokenManager(Reader * stream, int lexState = {{defaultLexState}});
  virtual ~{{PARSER_NAME}}TokenManager();

protected:
  void ReInit(Reader * stream, int lexState = {{defaultLexState}});
  void SwitchTo(int lexState);
  void clear();
@if(DEBUG_TOKEN_MANAGER)
  const Latin1 jjKindsForBitVector(int i, unsigned long long vec);
  const Latin1 jjKindsForStateVector(int lexState, int vec[], int start, int end);
@fi

  int                       jjrounds[{{stateSetSize}}];
  int                       jjstateSet[2 * {{stateSetSize}}];
  JJString                  jjimage;
  JJString                  image;
  int                       jjimageLen;
  int                       lengthOfMatch;
  uint32_t                  curChar; // TOL: Support Unicode
  TokenManagerErrorHandler* errorHandler = nullptr;

public:
  void	 lexicalError();
  const  TokenManagerErrorHandler*	 getErrorHandler() const;
};
@if(NAMESPACE)
}
@fi
#endif