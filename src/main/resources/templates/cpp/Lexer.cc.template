// disable warnings on parser header files
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wunused-variable"

#include "{{PARSER_NAME}}TokenManager.h"
#include "TokenManagerError.h"
#include "TokenManagerErrorHandler.h"


@foreach(index : LOHI_BYTES)
static const unsigned long long jjbitVec{{index}}[] = { {{index.bytes}} };
@end
{{DumpStrLiteralImages}}
{{DumpStateSets}}
@if(DEBUG_TOKEN_MANAGER)
{{DumpStatesForStateCPP}}
{{DumpStatesForKind}}
@fi
@if(HAS_LOOP)
static int  jjemptyLineNo[{{MAX_LEX_STATES}}];
static int  jjemptyColNo[{{MAX_LEX_STATES}}];
static bool jjbeenHere[{{MAX_LEX_STATES}}];
@fi

/** Lexer state names. */
@foreach(item : STATE_NAMES_AS_CHARS)
static const JJChar lexStateNames_arr_{{item.index}}[] = 
{{{item.chars}}, 0};
@end
static const JJString lexStateNames[] = {
@foreach(i : MAX_LEX_STATES)
lexStateNames_arr_{{i}}, 
@end
};

{{DumpStaticVarDeclarations}}
@if(CPP_NAMESPACE)
namespace {{CPP_NAMESPACE}} {
@fi

  void {{PARSER_NAME}}TokenManager::setDebugStream(FILE *ds) { debugStream = ds; }
@foreach(name : STATES)
{{name.body}}
@end

Token * {{PARSER_NAME}}TokenManager::jjFillToken() {
   Token *t;
   JJString curTokenImage;
@if(KEEP_LINE_COOL)
   int beginLine   = -1;
   int endLine     = -1;
   int beginColumn = -1;
   int endColumn   = -1;
@fi
@if(HAS_EMPTY_MATCH)
   if (jjmatchedPos < 0)
   {
       curTokenImage = image.c_str();
@if(KEEP_LINE_COOL)
     if (reader->getTrackLineColumn()) {
        beginLine = endLine = reader->getEndLine();
        beginColumn = endColumn = reader->getEndColumn();
     }
@fi
   } else {
     JJString im = jjstrLiteralImages[jjmatchedKind];
     curTokenImage = (im.length() == 0) ? reader->getImage() : im;
@if(KEEP_LINE_COOL)
    if (reader->getTrackLineColumn()) {
        beginLine = reader->getBeginLine();
        beginColumn = reader->getBeginColumn();
        endLine = reader->getEndLine();
        endColumn = reader->getEndColumn();
    }
@fi
   }
@else
   JJString im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im.length() == 0) ? reader->getImage() : im;
@if(KEEP_LINE_COOL)
   if (reader->getTrackLineColumn()) {
     beginLine = reader->getBeginLine();
     beginColumn = reader->getBeginColumn();
     endLine = reader->getEndLine();
     endColumn = reader->getEndColumn();
   }
@fi
@fi
   t = Token::newToken(jjmatchedKind, curTokenImage);
@if(KEEP_LINE_COOL)

   t->beginLine() = beginLine;
   t->endLine() = endLine;
   t->beginColumn() = beginColumn;
   t->endColumn() = endColumn;
@fi

   return t;
}
@foreach(name : NON_ASCII_TABLE)
{{name.method}}
@end
/** Get the next Token. */
Token * {{PARSER_NAME}}TokenManager::getNextToken() {
@if (HAS_SPECIAL)
  Token *specialToken = nullptr;
@fi
  Token *matchedToken = nullptr;
  int curPos = 0;

  for (;;)
  {
   EOFLoop:
   if (reader->endOfInput())
   {
@if(DEBUG_TOKEN_MANAGER)
      fprintf(debugStream, \"Returning the <EOF> token.\\n\");
@fi
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
@if(HAS_SPECIAL)
      matchedToken->specialToken = specialToken;
@fi
{{DumpGetNextToken}}
@if(MAX_LEX_STATES)
     }
     int error_line = reader->getEndLine();
     int error_column = reader->getEndColumn();
     JJString error_after = JJEMPTY;
     bool EOFSeen = false;
     if (reader->endOfInput()) {
        EOFSeen = true;
        error_after = curPos <= 1 ? JJEMPTY : reader->getImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        error_after = curPos <= 1 ? JJEMPTY : reader->getImage();
     }
     errorHandler->lexicalError(EOFSeen, curLexState, error_line, error_column, error_after, curChar);
@fi
@if(HAS_MORE)
 }
@fi
  }
}


@if(HAS_SKIP_ACTIONS)
{{DumpSkipActions}}
@fi
@if(HAS_MORE_ACTIONS)
{{DumpMoreActions(}}
@fi
@if(HAS_TOKEN_ACTIONS)
{{DumpTokenActions}}
@fi
/** Reinitialise parser. */
void {{PARSER_NAME}}TokenManager::ReInit(Reader * stream, int lexState)
{
    clear();
    jjmatchedPos = jjnewStateCnt = 0;
    defaultLexState = 0;
    curLexState = 0;
    reader = stream;
    ReInitRounds();
    debugStream = stdout; // init
    SwitchTo(lexState);
    errorHandler = new TokenManagerErrorHandler();
}

  void {{PARSER_NAME}}TokenManager::ReInitRounds() {
    int i;
    jjround = 0x80000001;
    for (i = {{STATE_SET_SIZE}}; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

/** Switch to specified lex state. */
void {{PARSER_NAME}}TokenManager::SwitchTo(int lexState)
{
    if (lexState >= {{STATE_COUNT}} || lexState < 0) {
      JJString message;
      message += JJWIDE(Error: Ignoring invalid lexical state : );
      message += lexState; message += JJWIDE(. State unchanged.);
      throw new TokenManagerError(message, INVALID_LEXICAL_STATE);
    } else
      curLexState = lexState;
}

void OQLTokenManager::lexicalError() {
	std::clog << "Lexical error encountered." << std::endl;
}
const  TokenManagerErrorHandler* OQLTokenManager::getErrorHandler() const {
  return errorHandler;
}

  /** Constructor. */
  {{PARSER_NAME}}TokenManager::{{PARSER_NAME}}TokenManager(Reader * stream, int lexState)
  {
    reader = nullptr;
    ReInit(stream, lexState);
  }

  // Destructor
  {{PARSER_NAME}}TokenManager::~{{PARSER_NAME}}TokenManager() {
    clear();
  }

  // clear
  void {{PARSER_NAME}}TokenManager::clear() {
    //Since reader was generated outside of TokenManager
    //TokenManager should not take care of deleting it
    //if (reader) delete reader;
    if (errorHandler) delete errorHandler, errorHandler = nullptr;    
  }

@if(CPP_NAMESPACE)
}
@fi

#pragma GCC diagnostic pop