// disable warnings on parser header files
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wunused-variable"

#ifndef JAVACC_PARSER_ERROR_HANDLER
#define JAVACC_PARSER_ERROR_HANDLER

#include "JavaCC.h"
#include "Token.h"

@if(NAMESPACE)
namespace {{NAMESPACE}} {
@fi

class ParserErrorHandler {
public:
    ParserErrorHandler() : error_count(0) {}
    virtual ~ParserErrorHandler() {}

    // Called when the parser encounters a different token when expecting to consume a specific kind of token.
    // expectedKind  - token kind that the parser was trying to consume.
    // expectedToken - the image of the token - tokenImages[expectedKind].
    // actual        - the actual token that the parser got instead.
    virtual void unexpectedToken(const JJString& expectedImage, const JJString& expectedLabel, const JJString& actualImage, const JJString& actualLabel, const Token* actualToken);

    // Called when the parser cannot continue parsing.
    // last         - the last token successfully parsed.
    // unexpected   - the token at which the error occurs.
    // production   - the production in which this error occurs.
    virtual void parseError(const Token* last, const Token* unexpected, const Latin1 & production);
    virtual void otherError(const JJString& message);
    int getErrorCount() const { return error_count; }

protected:
    int error_count;
};

@if(NAMESPACE)
}
@fi

#endif

#pragma GCC diagnostic pop