package {{PACKAGE}};

@if NODE_EXTENDS
public class Node extends {{NODE_EXTENDS}} implements Tree {
@else
public class Node implements Tree {
@fi

  protected Node   parent;
  protected Node[] children;
  protected int    id;
  protected Object value;
  protected {{PARSER_NAME}}    parser;
@if TRACK_TOKENS
  protected Token firstToken;
  protected Token lastToken;
@fi

  public Node({{PARSER_NAME}} p, int i) {
    this.id = i;
    this.parser = p;
  }

@if NODE_FACTORY
  public static Node jjtCreate({{PARSER_NAME}} p, int id) {
    return new Node(p, id);
  }

@fi
  @Override
  public void jjtOpen() {}

  @Override
  public void jjtClose() {}

  @Override
  public void jjtSetParent(Node n) {
    this.parent = n;
  }

  @Override
  public Node jjtGetParent() {
    return this.parent;
  }

  @Override
  public void jjtAddChild(Node n, int i) {
    if (this.children == null) {
      this.children = new Node[i + 1];
    } else if (i >= this.children.length) {
      Node[] c = new Node[i + 1];
      System.arraycopy(this.children, 0, c, 0, this.children.length);
      this.children = c;
    }
    this.children[i] = n;
  }

  @Override
  public Node jjtGetChild(int i) {
    return this.children[i];
  }

  @Override
  public int jjtGetNumChildren() {
    return (this.children == null) ? 0 : this.children.length;
  }

  public void jjtSetValue(Object value) {
    this.value = value;
  }

  public Object jjtGetValue() {
    return this.value;
  }

@if TRACK_TOKENS
  public Token jjtGetFirstToken() { return firstToken; }
  public void jjtSetFirstToken(Token token) { this.firstToken = token; }
  public Token jjtGetLastToken() { return lastToken; }
  public void jjtSetLastToken(Token token) { this.lastToken = token; }

@fi
@if VISITOR
  /** Accept the visitor. **/
  public {{VISITOR_RETURN_TYPE}} jjtAccept({{PARSER_NAME}}Visitor visitor, {{VISITOR_DATA_TYPE:-Object}} data)
@if VISITOR_EXCEPTION
     throws {{VISITOR_EXCEPTION}}
@fi
{
@if VISITOR_RETURN_TYPE_VOID
    visitor.visit(this, data);
@else
    return visitor.visit(this, data);
@fi
  }

  /** Accept the visitor. **/
  public Object childrenAccept({{PARSER_NAME}}Visitor visitor, {{VISITOR_DATA_TYPE:-Object}} data)
@if VISITOR_EXCEPTION
     throws {{VISITOR_EXCEPTION}}
@fi
{
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        children[i].jjtAccept(visitor, data);
      }
    }
    return data;
  }

@fi
  /*
   * You can override these two methods in subclasses of Node to customize the way the node appears
   * when the tree is dumped. If your output uses more than one line you should override
   * toString(String), otherwise overriding toString() is probably all you need to do.
   */

  @Override
  public String toString() {
    return {{PARSER_NAME}}TreeConstants.jjtNodeName[this.id];
  }

  public String toString(String prefix) {
    return prefix + toString();
  }

  /*
   * Override this method if you want to customize how the node dumps out its children.
   */

  public void dump(String prefix) {
    System.out.println(toString(prefix));
    if (this.children != null) {
      for (Node child : this.children) {
        Node n = child;
        if (n != null) {
          n.dump(prefix + " ");
        }
      }
    }
  }

  @Override
  public int getId() {
    return this.id;
  }
}

