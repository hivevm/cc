// Copyright 2011 Google Inc. All Rights Reserved.
// Author: sreeni@google.com (Sreeni Viswanadha)

/*
 * Copyright (c) 2006, Sun Microsystems, Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted
 * provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this list of conditions
 * and the following disclaimer. * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the documentation and/or other
 * materials provided with the distribution. * Neither the name of the Sun Microsystems, Inc. nor
 * the names of its contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package it.smartio.fastcc.generator.java;

import it.smartio.fastcc.parser.ParseException;

import java.io.File;
import java.io.IOException;
import java.util.List;

import it.smartio.fastcc.FastCC;
import it.smartio.fastcc.JavaCCRequest;
import it.smartio.fastcc.generator.LexerData;
import it.smartio.fastcc.generator.OtherFilesGenerator;
import it.smartio.fastcc.parser.JavaCCErrors;
import it.smartio.fastcc.parser.Options;
import it.smartio.fastcc.parser.RStringLiteral;
import it.smartio.fastcc.parser.RegExprSpec;
import it.smartio.fastcc.parser.RegularExpression;
import it.smartio.fastcc.parser.TokenProduction;
import it.smartio.fastcc.utils.DigestOptions;
import it.smartio.fastcc.utils.DigestWriter;
import it.smartio.fastcc.utils.Encoding;
import it.smartio.fastcc.utils.Template;

/**
 * Generates the Constants file.
 */
public class JavaOtherFilesGenerator implements OtherFilesGenerator {

  @Override
  public final void start(LexerData data, JavaCCRequest request) throws ParseException {
    if (JavaCCErrors.hasError()) {
      throw new ParseException();
    }

    JavaOtherFilesGenerator.generateFile(request, "Provider.java", "/templates/Provider.template");
    JavaOtherFilesGenerator.generateFile(request, "StringProvider.java", "/templates/StringProvider.template");
    JavaOtherFilesGenerator.generateFile(request, "StreamProvider.java", "/templates/StreamProvider.template");

    JavaOtherFilesGenerator.generateFile(request, "JavaCharStream.java", "/templates/JavaCharStream.template");
    JavaOtherFilesGenerator.generateFile(request, "ParseException.java", "/templates/ParseException.template");

    JavaOtherFilesGenerator.generateFile(request, "Token.java", "/templates/Token.template");
    JavaOtherFilesGenerator.generateFile(request, "TokenMgrException.java", "/templates/TokenMgrError.template");

    File file = new File(Options.getOutputDirectory(), request.getParserName() + "Constants.java");
    try (DigestWriter ostr = DigestWriter.create(file, FastCC.VERSION, DigestOptions.get())) {
      JavaCCToken.printTokenSetup(ostr, request);
      ostr.println("");
      ostr.println("/**");
      ostr.println(" * Token literal values and constants.");
      ostr.println(" * Generated by org.javacc.parser.OtherFilesGen#start()");
      ostr.println(" */");

      ostr.print("public ");
      ostr.println("interface " + request.getParserName() + "Constants {");
      ostr.println("");

      ostr.println("  /** End of File. */");
      ostr.println("  int EOF = 0;");
      for (RegularExpression re : request.getOrderedsTokens()) {
        ostr.println("  /** RegularExpression Id. */");
        ostr.println("  int " + re.label + " = " + re.ordinal + ";");
      }
      ostr.println("");
      for (int i = 0; i < data.getStateCount(); i++) {
        ostr.println("  /** Lexical state. */");
        ostr.println("  int " + data.getStateName(i) + " = " + i + ";");
      }
      ostr.println("");
      ostr.println("  /** Literal token values. */");
      ostr.println("  String[] tokenImage = {");
      ostr.println("    \"<EOF>\",");

      for (TokenProduction tokenProduction : request.getTokenProductions()) {
        TokenProduction tp = (tokenProduction);
        List<RegExprSpec> respecs = tp.respecs;
        for (RegExprSpec respec : respecs) {
          RegExprSpec res = (respec);
          RegularExpression re = res.rexp;
          ostr.print("    ");
          if (re instanceof RStringLiteral) {
            ostr.println("\"\\\"" + Encoding.escape(Encoding.escape(((RStringLiteral) re).image)) + "\\\"\",");
          } else if (!re.label.equals("")) {
            ostr.println("\"<" + re.label + ">\",");
          } else {
            if (re.tpContext.kind == TokenProduction.TOKEN) {
              JavaCCErrors.warning(re, "Consider giving this non-string token a label for better error reporting.");
            }
            ostr.println("\"<token of kind " + re.ordinal + ">\",");
          }

        }
      }
      ostr.println("  };");
      ostr.println("");
      ostr.println("}");

    } catch (IOException e) {
      JavaCCErrors.semantic_error("Could not open file " + request.getParserName() + "Constants.java for writing.");
      throw new Error();
    }
  }

  /**
   * Generates a {@link File} from a template.
   *
   * @param request
   * @param filename
   * @param template
   */
  private static void generateFile(JavaCCRequest request, String filename, String template) throws Error {
    File file = new File(Options.getOutputDirectory(), filename);

    try (DigestWriter ostr = DigestWriter.create(file, FastCC.VERSION, DigestOptions.get())) {
      JavaCCToken.print(ostr, request);
      Template.of(template, ostr.options()).write(ostr);
    } catch (IOException e) {
      System.err.println("Failed to create " + filename + " " + e);
      JavaCCErrors.semantic_error("Could not open file " + filename + " for writing.");
      throw new Error();
    }
  }
}
